// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OtpServiceClient is the client API for OtpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtpServiceClient interface {
	// Request a new OTP
	// When both a email and mobile number is provided email wins
	// and mobile will be ignored
	RequestOtp(ctx context.Context, in *RequestOtpReq, opts ...grpc.CallOption) (*RequestOtpRes, error)
	// Verify a given OTP
	VerifyOp(ctx context.Context, in *VerifyOptReq, opts ...grpc.CallOption) (*VerifyOtpRes, error)
}

type otpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOtpServiceClient(cc grpc.ClientConnInterface) OtpServiceClient {
	return &otpServiceClient{cc}
}

func (c *otpServiceClient) RequestOtp(ctx context.Context, in *RequestOtpReq, opts ...grpc.CallOption) (*RequestOtpRes, error) {
	out := new(RequestOtpRes)
	err := c.cc.Invoke(ctx, "/auth.OtpService/RequestOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otpServiceClient) VerifyOp(ctx context.Context, in *VerifyOptReq, opts ...grpc.CallOption) (*VerifyOtpRes, error) {
	out := new(VerifyOtpRes)
	err := c.cc.Invoke(ctx, "/auth.OtpService/VerifyOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtpServiceServer is the server API for OtpService service.
// All implementations should embed UnimplementedOtpServiceServer
// for forward compatibility
type OtpServiceServer interface {
	// Request a new OTP
	// When both a email and mobile number is provided email wins
	// and mobile will be ignored
	RequestOtp(context.Context, *RequestOtpReq) (*RequestOtpRes, error)
	// Verify a given OTP
	VerifyOp(context.Context, *VerifyOptReq) (*VerifyOtpRes, error)
}

// UnimplementedOtpServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOtpServiceServer struct {
}

func (UnimplementedOtpServiceServer) RequestOtp(context.Context, *RequestOtpReq) (*RequestOtpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestOtp not implemented")
}
func (UnimplementedOtpServiceServer) VerifyOp(context.Context, *VerifyOptReq) (*VerifyOtpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOp not implemented")
}

// UnsafeOtpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtpServiceServer will
// result in compilation errors.
type UnsafeOtpServiceServer interface {
	mustEmbedUnimplementedOtpServiceServer()
}

func RegisterOtpServiceServer(s grpc.ServiceRegistrar, srv OtpServiceServer) {
	s.RegisterService(&OtpService_ServiceDesc, srv)
}

func _OtpService_RequestOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOtpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtpServiceServer).RequestOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.OtpService/RequestOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtpServiceServer).RequestOtp(ctx, req.(*RequestOtpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtpService_VerifyOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtpServiceServer).VerifyOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.OtpService/VerifyOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtpServiceServer).VerifyOp(ctx, req.(*VerifyOptReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OtpService_ServiceDesc is the grpc.ServiceDesc for OtpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OtpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.OtpService",
	HandlerType: (*OtpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestOtp",
			Handler:    _OtpService_RequestOtp_Handler,
		},
		{
			MethodName: "VerifyOp",
			Handler:    _OtpService_VerifyOp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/otp.proto",
}
